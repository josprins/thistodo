{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","items","newItem","text","handleInput","e","setState","id","Date","now","target","value","addItem","preventDefault","tempNewItem","alertMessage","updateItem","forEach","item","deleteItem","filteredItems","filter","message","className","div","document","createElement","appendChild","createTextNode","container","querySelector","form","insertBefore","setTimeout","remove","onSubmit","this","htmlFor","type","onChange","aria-describedby","placeholder","map","key","onClick","data-dismiss","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2RAgIeA,G,wNAzHbC,MAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,KAAM,K,EAIVC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CACZJ,QAAS,CACPK,GAAIC,KAAKC,MACTN,KAAME,EAAEK,OAAOC,U,EAKrBC,QAAU,SAAAP,GACRA,EAAEQ,iBACF,IAAMC,EAAc,EAAKd,MAAME,QAC/B,GAAyB,KAArBY,EAAYX,KAAa,CAC3B,IAAMF,EAAK,sBAAO,EAAKD,MAAMC,OAAlB,CAAyBa,IACpC,EAAKR,SAAS,CACZL,MAAOA,EACPC,QAAS,CACPK,GAAI,GACJJ,KAAM,MAGV,EAAKY,aAAa,mBAAoB,a,EAI1CC,WAAa,SAACT,EAAIJ,GAChB,IAAMF,EAAQ,EAAKD,MAAMC,MACzBA,EAAMgB,SAAQ,SAAAC,GACRA,EAAKX,KAAOA,IACdW,EAAKf,KAAOA,MAGhB,EAAKG,SAAS,CACZL,MAAOA,K,EAIXkB,WAAa,SAAAZ,GACX,IAAMa,EAAgB,EAAKpB,MAAMC,MAAMoB,QAAO,SAAAH,GAAI,OAAIA,EAAKX,KAAOA,KAClE,EAAKD,SAAS,CACZL,MAAOmB,IAET,EAAKL,aAAa,sBAAuB,Y,2DAG9BO,EAASC,GACpB,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAID,UAAJ,sBAA+BA,GAC/BC,EAAIG,YAAYF,SAASG,eAAeN,IACxC,IAAMO,EAAYJ,SAASK,cAAc,cACnCC,EAAON,SAASK,cAAc,eACpCD,EAAUG,aAAaR,EAAKO,GAE5BE,YAAW,WACTR,SAASK,cAAc,UAAUI,WAChC,Q,+BAIK,IAAD,OACP,OACE,yBAAKX,UAAU,iBACb,gCACE,mCAAQ,sCAAR,OAEF,0BAAMY,SAAUC,KAAKxB,QAASW,UAAU,6BACtC,2BAAOc,QAAQ,uBACf,2BACEC,KAAK,OACL3B,MAAOyB,KAAKpC,MAAME,QAAQC,KAC1BoC,SAAUH,KAAKhC,YACfmB,UAAU,2BACVhB,GAAG,qBACHiC,mBAAiB,YACjBC,YAAY,mBAEd,6BACA,4BACEH,KAAK,SACLf,UAAU,wBAFZ,aAOF,6BACGa,KAAKpC,MAAMC,MAAMyC,KAAI,SAAAxB,GAAI,OACxB,yBACEK,UAAU,gDACVoB,IAAKzB,EAAKX,IAEV,2BACE+B,KAAK,OACLf,UAAU,0BACVgB,SAAU,SAAAlC,GAAO,EAAKW,WAAWE,EAAKX,GAAIF,EAAEK,OAAOC,QACnDgC,IAAKzB,EAAKX,GACVI,MAAOO,EAAKf,OAEd,4BACEyC,QAAS,kBAAM,EAAKzB,WAAWD,EAAKX,KACpC+B,KAAK,SACLf,UAAU,QACVsB,eAAa,SAJf,kB,GAzGIC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1C,c","file":"static/js/main.2ea3e4e4.chunk.js","sourcesContent":["import React from 'react';\nimport './bootswatch.css'\nimport './App.css';\n\n\n\nclass App extends React.Component {\n  state = {\n    items: [],\n    newItem: {\n      text: ''\n    }\n  }\n\n  handleInput = e => {\n    this.setState({\n      newItem: {\n        id: Date.now(),\n        text: e.target.value\n      }\n    })\n  }\n\n  addItem = e => {\n    e.preventDefault()\n    const tempNewItem = this.state.newItem\n    if (tempNewItem.text !== \"\") {\n      const items = [...this.state.items, tempNewItem]\n      this.setState({\n        items: items,\n        newItem: {\n          id: '',\n          text: ''\n        }\n      })\n      this.alertMessage(\"A todo was added\", \"primary\")\n    }\n  }\n\n  updateItem = (id, text) => {\n    const items = this.state.items\n    items.forEach(item => {\n      if (item.id === id) {\n        item.text = text\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n\n  deleteItem = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id)\n    this.setState({\n      items: filteredItems\n    })\n    this.alertMessage(\"The todo is deleted\", \"success\")\n  }\n\n  alertMessage(message, className) {\n    const div = document.createElement('div')\n    div.className = `alert alert-${className}`\n    div.appendChild(document.createTextNode(message))\n    const container = document.querySelector('.container')\n    const form = document.querySelector('.form-group')\n    container.insertBefore(div, form)\n\n    setTimeout(() => {\n      document.querySelector('.alert').remove()\n    }, 2200)\n  }\n\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <header>\n          <h1>This<strong>To</strong>Do</h1>\n        </header>\n        <form onSubmit={this.addItem} className=\"form-group form-container\">\n          <label htmlFor=\"exampleInputEmail1\"></label>\n          <input\n            type=\"text\"\n            value={this.state.newItem.text}\n            onChange={this.handleInput}\n            className=\"form-control input-input\"\n            id=\"exampleInputEmail1\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"Enter a todo..\"\n          />\n          <br />\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary knop\"\n          >\n            Add Todo\n          </button>\n        </form>\n        <div>\n          {this.state.items.map(item =>\n            <div\n              className=\"alert alert-dismissible alert-light todo-item\"\n              key={item.id}\n            >\n              <input\n                type=\"text\"\n                className=\"form-control todo-input\"\n                onChange={e => { this.updateItem(item.id, e.target.value) }}\n                key={item.id}\n                value={item.text}\n              />\n              <button\n                onClick={() => this.deleteItem(item.id)}\n                type=\"button\"\n                className=\"close\"\n                data-dismiss=\"alert\"\n              >\n                &times;\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}